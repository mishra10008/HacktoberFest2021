int Solution::isMatch(const string A,
    const string B) {
    int n = A.size();
    int m = B.size();
    int cnt = 0;
    for (int i = 0; i < m; i++) {
        if (B[i] == '*') {
            cnt++;
        }
    }
    if ((m - cnt) > n)
        return 0;
    int DP[n + 1];
    memset(DP, 0, sizeof(DP));
    DP[0] = 1;
    for (int i = 0; i < m; i++) {
        if (B[i] == '*') {
            for (int j = 1; j <= n; j++) {
                DP[j] = (DP[j - 1] || DP[j]);
            }
        } else {
            for (int j = n - 1; j >= 0; j--) {
                DP[j + 1] = DP[j] & (B[i] == A[j] || B[i] == '?');
            }
        }
        DP[0] = DP[0] & (B[i] == '*');
    }
    if (DP[n])
        return 1;
    return 0;
}
